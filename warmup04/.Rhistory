correlation
cor(height, price)
# number of individuals
n <- length(height)
# mean of variable X (height)
x <- sum(height)/n
x
# mean of variable Y (price)
y <- sum(price) / n
y
# variance of X
var_x <- (1 / (n-1)) * sum((height - x)^2)
var_x
# variance of Y
var_y <- (1 / (n-1)) * sum((price - y)^2)
var_y
# sd of X
sd_x <- sqrt(var_x)
sd_x
# sd of Y
sd_y <- sqrt(var_y)
sd_y
#covariance between X and Y
covariance <- (1 / (n-1)) * sum((height - x) * (price - y))
covariance
#correlation between X and Y
correlation <- covariance / (sd_x * sd_y)
correlation
weight_lbs <- weight * 0.00220462
height_in <- height * 0.393701
length(price <= 300)
?filter
length(price[price <= 300])
# how many tents have a price between $300 and $400
length(price[price >= 300 & price <= 400])
# what’s the name of the tent with maximum price
tent[max.col(price)]
# what’s the name of the tent with maximum price
tent[max.index(price)]
# what’s the name of the tent with maximum price
tent[max(price)]
# what’s the name of the tent with maximum price
tent[index.max(price)]
??maximum
# what’s the name of the tent with maximum price
tent[which.max(price)]
# how many tents have a price > $400 AND weight < 1500 grams
length(tent[price > 400 & weight < 1500])
??percentile
# calculate the 90th percentile for height
height_p90 <- quartile(height, 90)
# calculate the 90th percentile for height
height_p90 <- quartile(height, c(90))
# calculate the 90th percentile for height
height_p90 <- quantile(height, c(90))
# calculate the 90th percentile for height
height_p90 <- quantile(height, c(.90))
height <- p90
# calculate the 90th percentile for height
height_p90 <- quantile(height, c(.90))
height_p90
# calculate the 90th percentile for height
height_p90 <- height[quantile(height, c(.90))]
height_p90
# calculate the 90th percentile for height
height_p90 <- height[(length(height) / 10) * 9]
# calculate the 90th percentile for height
height_p90 <- height[length(height) * 9/10]
height_p90
# calculate the 90th percentile for height
height_p90 <- sort(height, increasing)[length(height) * 9/10]
# calculate the 90th percentile for height
height_p90 <- sort(height, increasing = TRUE)[length(height) * 9/10]
# calculate the 90th percentile for height
height_p90 <- sort(height, decreasing = = FALSE)[length(height) * 9/10]
# calculate the 90th percentile for height
height_p90 <- sort(height, decreasing = FALSE)[length(height) * 9/10]
height_p90
# calculate the 90th percentile for weight and assign it to the object weight_p90 (display this value)
weight_p90 <- sort(weight, decreasing = FALSE)[length(height) * 9/10]
weight_p90
quartile(weight, c(.9))
quarntile(weight, c(.9))
quantile(weight, c(.9))
# calculate the 90th percentile for weight and assign it to the object weight_p90 (display this value)
weight_p90 <- sort(weight, decreasing = FALSE)[length(height) * 9/10 +.01]
weight_p90
# calculate the 90th percentile for weight and assign it to the object weight_p90 (display this value)
weight_p90 <- sort(weight, decreasing = FALSE)[length(height) * 9/10 + 1]
weight_p90
# calculate the 90th percentile for weight and assign it to the object weight_p90 (display this value)
weight_p90 <- sort(weight, decreasing = FALSE)[length(height) * 9/10]
weight_p90
# display the name of the tents with height > height_p90 AND weight > weight_p90
tent[height > height_p90 & weight > weight_p90]
?cut
#Use cut() to create a factor weight_cut
cut(weight, 9)
#Use cut() to create a factor weight_cut
cut(weight, 1000)
#Use cut() to create a factor weight_cut
cut(weight, 9)
#Use cut() to create a factor weight_cut
cut(weight, c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000))
#Use cut() to create a factor weight_cut
cut(weight, c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = (0, 1000])
#Use cut() to create a factor weight_cut
cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = (0, 1000])
#Use cut() to create a factor weight_cut
cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000))
weight
#Use cut() to create a factor weight_cut
weight_cut <- cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = )
table(weight_cut)
#Use cut() to create a factor weight_cut
weight_cut <- cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c(1:10 "kg"))
#Use cut() to create a factor weight_cut
weight_cut <- cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c(1"kg":10"kg"))
#Use cut() to create a factor weight_cut
weight_cut <- cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c(1kg:10kg))
#Use cut() to create a factor weight_cut
weight_cut <- cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c("1kg","2kg","3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
#Use cut() to create a factor weight_cut
weight_cut <- cut(weight, c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c("1kg","2kg","3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
table(weight_cut)
?factor
summary(season)
nlevels(season)
is.ordered(season)
factor(season)
is.ordered(season)
f_season <- factor(season)
is.ordered(f_season)
factor(season, ordered = is.ordered(season)
is.ordered(season)
factor(season, ordered = is.ordered(season))
is.ordered(season)
factor(season, ordered = TRUE)
is.ordered(season)
factor(season, levels = c("3-season", "3-4-season", "4-season")
factor(season, levels = c("3-season", "3-4-season", "4-season"))
factor(season, levels = c("3-season", "3-4-season", "4-season"))
is.ordered(season)
factor(season, levels = c("3-season", "3-4-season", "4-season"))
is.ordered(f_season)
f_season <- factor(season, levels = c("3-season", "3-4-season", "4-season"))
is.ordered(f_season)
factor(season, levels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
is.ordered(f_season)
factor(season, levels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
is.ordered(season)
factor(season, levels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
is.ordered(season)
is.ordered(f_season)
f_season <- factor(season, levels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
is.ordered(f_season)
is.ordered(season)
season = factor(season, levels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
is.ordered(season)
knitr::opts_chunk$set(echo = TRUE)
# import the data with the function read_csv()
read.csv(https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018.csv)
?read.csv
# import the data with the function read_csv()
read.csv(https:/raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018.csv, col_types = c("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
# import the data with the function read_csv()
read.csv(https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018.csv, col_types = c("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
setwd("~/Desktop/hw-stat133/warmup04")
setwd("~/Desktop/hw-stat133/warmup04")
# import the data with the function read_csv()
read.csv(file = nba2018.csv, col_types = c("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
setwd("~/Desktop/hw-stat133/warmup04")
# import the data with the function read_csv()
read.csv(file = nba2018.csv, col_types = c("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
?read.csv
??col_tyoes
??col_types
# import the data with the function read_csv()
read.csv(file = nba2018.csv)
# import the data with the function read_csv()
data <- read.csv(file = nba2018.csv)
# import the data with the function read_csv()
data <- read.csv("nba2018.csv")
str()
str(data)
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = c("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = col("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = cols("character", "integer", "factor", "character", "integer", "character", "character", "character", "character", "character", "double", "integer", "integer", "integer", "integer", "integer", "integer", "double", "integer", "integer", "double", "integer", "integer", "double", "double", "integer", "integer", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", "integer"))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = cols(player = "c", team = "c", height = "c", birth_date = "c", country = "c", experience= "c", college = "c", .default = "i"))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = cols(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience= col_character(), college = col_character(), .default = col_integer()))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = cols(Factor = col_character(), num = col_double()))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = cols(Factor = col_character(), number = col_double()))
# import the data with the function read_csv()
read.csv("nba2018.csv", col_types = cols(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience= col_character(), college = col_character())
str(data)
# import the data with the function read_csv()
data <- read.csv("nba2018.csv", col_types = cols(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience= col_character(), college = col_character())
str(data)
# import the data with the function read_csv()
data <- read.csv("nba2018.csv", col_types = cols(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience= col_character(), college = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col_types = cols(player = col_character(),
team = col_character(),
height = col_character(),
birth_date = col_character(),
country = col_character(),
experience= col_character(),
college = col_character()))
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col_types = cols(player = col_character(),
team = col_character(),
height = col_character(),
birth_date = col_character(),
country = col_character(),
experience= col_character(),
college = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col_types = cols(player = col_character(),
team = col_character(),
height = col_character(),
birth_date = col_character(),
country = col_character(),
experience= col_character(),
college = col_character()))
str(data)
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col_types = cols(player = col_character(),))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col_types = cols(player = col_character()))
library(readr)
setwd("~/Desktop/hw-stat133/warmup04")
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col_types = cols(player = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE
col_types = cols(player = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE
col_types = list(player = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE
col_types = list(data.player = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE
col_types = list(player = col_character()))
col_types =
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE
col_types = list(player = col_character()))
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE,
col_types = list(player = col_character()))
View(data)
setwd("~/Desktop/hw-stat133/warmup04")
library(readr)
# import the data with the function read_csv()
data <- read.csv("nba2018.csv",
col.names = TRUE,
col_types = list(player = col_character()))
# import the data with the function read_csv()
data <- read_csv("nba2018.csv",
col.names = TRUE,
col_types = list(player = col_character()))
# import the data with the function read_csv()
data <- read_csv("nba2018.csv",
col_types = list(player = col_character()))
# import the data with the function read_csv()
data <- read_csv("nba2018.csv",
col_types = list(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience = col_character(), college = col_character(), salary = col_double(), field_goals_perc = col_double(), points3_perc = col_double(), points2_perc = col_double(), points1_perc = col_double(),
and effective_field_goal_perc))
# import the data with the function read_csv()
data <- read_csv("nba2018.csv",
col_types = list(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience = col_character(), college = col_character(), salary = col_double(), field_goals_perc = col_double(), points3_perc = col_double(), points2_perc = col_double(), points1_perc = col_double(), effective_field_goal_perc = col_double()))
str(data)
# import the data with the function read_csv()
data <- read_csv("nba2018.csv",
col_types = list(player = col_character(), team = col_character(), height = col_character(), birth_date = col_character(), country = col_character(), experience = col_character(), college = col_character(), position = col_factor(c('C', 'PF', 'PG',
'SF', 'SG')), salary = col_double(), field_goals_perc = col_double(), points3_perc = col_double(), points2_perc = col_double(), points1_perc = col_double(), effective_field_goal_perc = col_double()))
str(data)
data4experience
data$experience
?replace
??replace
?replace
??replace
data$experience[data$experience == "R"] <- 0
data$experience
summary(data$experience)
?convert
??convert
?integrate
as.integer(data$experience)
summary(data$experience)
summary(data$experience)
data$experience = as.integer(data$experience)
summary(data$experience)
data$experience <-  as.integer(data$experience)
summary(data$experience)
data$experience <- as.integer(data$experience)
summary(data$experience)
# transforming salary
data$salary <- data$salary/1000000
summary(salary)
summary(data$salary)
??factor
?sub
# transforming position
sub("c", "center, "data$position)
# transforming position
sub("c", "center", data$position)
# transforming position
sub("C", "center", data$position)
sub("SF", "small_fwd", data$position)
ub("C", "center", data$position)
sub("C", "center", data$position)
sub("PF", "power_fwd", data$position)
sub("PG", "point_guard", data$position)
sub("SF", "small_fwd", data$position)
sub("SG", "shoot_guard", data$position)
# transforming position
sub("C", "center", data$position)
sub("PF", "power_fwd", data$position)
sub("PG", "point_guard", data$position)
sub("SF", "small_fwd", data$position)
sub("SG", "shoot_guard", data$position)
data$position <- sub("C", "center", data$position)
data$position <- sub("PF", "power_fwd", data$position)
data$position <- sub("PG", "point_guard", data$position)
data$position <- sub("SF", "small_fwd", data$position)
data$position <- sub("SG", "shoot_guard", data$position)
data$position
table(data$position)
prob.table(table(data$position))
?probabitlity
??probability
??frequency
prop.table(table(data$position))
# How many players went to UCLA (“University of California, Los Angeles”)?
length(data$player[college == "UCLA"])
# How many players went to UCLA (“University of California, Los Angeles”)?
length(data$player[data$college == "UCLA"])
# How many players went to Cal?
length(data$player[data$college == "UCB"])
# What’s the largest weight value?
max(data$weight)
# Who are the players with the largest weight value?
player[max(weight)]
# Who are the players with the largest weight value?
player[max(data$weight)]
# Who are the players with the largest weight value?
data$player[max(data$weight)]
# What’s the overall average weight?
mean(data$weight)
# What is the median salary of all players?
median(data$salary)
??order
# What’s the largest weight value?
sort(data$weight, decreasing = TRUE)[1]
??index
# Who are the players with the largest weight value?
data$player[sort(data$weight, decreasing = TRUE)[1]]
length(data)/2
length(data$salary)/2
length(data$salary)//2
# What is the median salary of all players?
data$salary[length(data$salary)/2]
# What is the median salary of all players?
sort(data$salary, decreasing = TRUE)[length(data$salary)/2]
# What is the median salary of all players?
sort(data$salary, decreasing = TRUE)[length(data$salary)/2+.5]
length(data$salary)/2
??mean
??sum
# What’s the largest weight value?
sort(data$weight, decreasing = TRUE)[1]
# What is the median salary of the players with 10 years of experience or more?
sort(data$salary[data$experience > 10], decreasing = TRUE)[length(data$salary)/2+.5]
summary(data$experience)
data$salary[data$experience > 10]
# What is the median salary of the players with 10 years of experience or more?
sort(data$salary[data$experience > 10], decreasing = TRUE)[length(data$salary[data$experience > 10])/2+.5]
# What is the median salary of the players with 10 years of experience or more?
sort(data$salary[data$experience > 10], decreasing = TRUE)[length(data$salary[data$experience > 10])/2]
# What is the median salary of all players?
sort(data$salary, decreasing = TRUE)[length(data$salary)/2+.5]
# What is the median salary of all players?
sort(data$salary, decreasing = TRUE)[length(data$salary)/2]
# What is the median salary of all players?
sort(data$salary, decreasing = TRUE)[length(data$salary)/2+.5]
# What is the median salary of the players with 10 years of experience or more?
sort(data$salary[data$experience > 10], decreasing = TRUE)[length(data$salary[data$experience > 10])/2+.5]
# What is the median salary of the players with 10 years of experience or more?
sort(data$salary[data$experience > 10], decreasing = TRUE)[length(data$salary[data$experience > 10])/2]
# What is the median salary of the players with 10 years of experience or more?
sort(data$salary[data$experience > 10], decreasing = TRUE)[length(data$salary[data$experience > 10])/2]
# What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
sort(data$salary[data$position == "shoot_guard" || data$position == "point_guard"], decreasing = TRUE)[length(data$salary[data$experience > 10])/2]
# What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
sort(data$salary[data$position == "shoot_guard" || data$position == "point_guard"], decreasing = TRUE)[length(data$salary[data$position == "shoot_guard" || data$position == "point_guard"])/2]
data$salary[data$position == "shoot_guard" || data$position == "point_guard"]
data$salary[data$position == "shoot_guard" | data$position == "point_guard"]
# What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
sort(data$salary[data$position == "shoot_guard" | data$position == "point_guard"], decreasing = TRUE)[length(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])/2]
# What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
sort(data$salary[data$position == "shoot_guard" | data$position == "point_guard"], decreasing = TRUE)[length(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])/2+.5]
# What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
sort(data$salary[data$position == "shoot_guard" | data$position == "point_guard"], decreasing = TRUE)[length(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])/2]
# What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
sort(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240], decreasing = TRUE)[length(data$salary[data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240]])/2]
median(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240])
# What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
sort(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240], decreasing = TRUE)[length(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240])/2]
# What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
sort(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240], decreasing = TRUE)[length(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240])/2+.5]
median(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])
# What is the median salary of the players with 10 years of experience or more?
median(data$salary[data$experience > 10])
# What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(data$salary[data$position == "shoot_guard" | data$position == "point_guard"])
# What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(data$salary[data$position == "power_fwd" & data$age >= 30 & data$weight >= 240])
c(1,2,3,4)
c(1,2,3,4)[length(c(1,2,3,4))/2+.5]
c(1,2,3,4)[length(c(1,2,3,4))/2+1]
??data frame
??dataframe
# Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw <- data.frame(data$player, data$position, data$height, data$weight, data$age)
??dataframe
gsw
missed_field_goals = data$field_goals_atts - data$field_goals
gsw
missed_field_goals
missed_free_throws = data$points1_atts - data$points1
rebounds = data$off_rebounds + data$def_rebounds
mins_game = data$minutes/data$games
?cbind
cbind(data, missed_field_goals, missed_free_throws, rebounds, mins_game)
# calculateing efficiency
EFF = (data$points + rebounds + data$assists + data$steals + data$blocks - missed_field_goals - missed_free_throws - data$turnovers) / data$games
cbind(data, EFF)
data
View(data)
data.frame(data, missed_field_goals, missed_free_throws, rebounds, mins_game)
data = data.frame(data, missed_field_goals, missed_free_throws, rebounds, mins_game)
data = data.frame(data, EFF)
View(data)
View(data)
# displaying efficiency
summary(EFF)
data = data.frame(data, efficiency)
# calculateing efficiency
efficiency = (data$points + rebounds + data$assists + data$steals + data$blocks - missed_field_goals - missed_free_throws - data$turnovers) / data$games
data = data.frame(data, efficiency)
data$EFF
data$EFF <- NULL
data$EFF <- NULL
data
# displaying efficiency
summary(efficiency)
hist(efficiency)
?hist
plot.histogram(efficiency)
hist(efficiency)
plot(hist(efficiency))
hist(efficiency)
?hist
hist(efficiency, xlab = "efficiency", main = "Efficiency of Players in NBA", col = "pink")
hist(efficiency, xlab = "Efficiency", ylab = "Frequency of Efficiency", main = "Efficiency of Players in NBA", col = "pink")
sort(efficiency)
top_10 <- data.frame(data$player[head(sort(efficiency, decreasing = TRUE)], data$teamhead[(sort(efficiency, decreasing = TRUE)], data$salary[(sort(efficiency, decreasing = TRUE)], efficiency[(sort(efficiency, decreasing = TRUE)])
efficiency[(sort(efficiency, decreasing = TRUE)]
efficiency[sort(efficiency, decreasing = TRUE)]
head(efficiency[sort(efficiency, decreasing = TRUE)])
head(sort(efficiency, decreasing = TRUE))
head(sort(efficiency, decreasing = TRUE), 10)
data$player[head(sort(efficiency, decreasing = TRUE), 10)]
top_10 <- data.frame(data$player[head(sort(efficiency, decreasing = TRUE), 10)], data$team[head(sort(efficiency, decreasing = TRUE), 10)], data$salary[head(sort(efficiency, decreasing = TRUE), 10)], head(sort(efficiency, decreasing = TRUE), 10))
top_10
# top 10 efficiency
data.frame(data$player[head(sort(efficiency, decreasing = TRUE), 10)], data$team[head(sort(efficiency, decreasing = TRUE), 10)], data$salary[head(sort(efficiency, decreasing = TRUE), 10)], head(sort(efficiency, decreasing = TRUE), 10))
# negative efficiency
data$player[efficiency < 0]
# The more efficient a player is, the higher his salary?
plot(efficiency, data$salary)
# The more efficient a player is, the higher his salary? There seems to be a general trend towards that
plot(efficiency, data$salary, xlab = "Efficiency of Players", ylab = "Salary of Players", main = "Correlation between Efficiency and Salary of NBA Players" )
# As players get older, do they tend to become more efficient?
plot(data$age, efficiency, xlab = "Age of Players", ylab = "Efficiency of Players", main = "Correlation between Age and Efficiency of NBA Players" )
# Does the rank of a player seem to be associated with his efficiency (i.e. the more importnat the rank, the more efficient)?
plot(data$rank, efficiency, xlab = "Rank of Players", ylab = "Efficiency of Players", main = "Correlation between Rank and Efficiency of NBA Players" )
?read_csv
