return(FALSE)
}
}
return(TRUE)
}
}
#' @title is hex
#' @description checks whether an input string is a valid hex color without an alpha transparency value
#' @param x a string input
#' @return TRUE or FALSE
is_hex <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || length(x) != 7) {
return(FALSE)
} else {
x = toupper(x)
valid = c(paste[0:9], LETTERS[1:6])
for (i in 2:7) {
if (!match(substr(x, i, i), valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
source("hex-color.R")
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
match("h", valid)
match("1", valid)
!NA
match("h", valid) == NA
match("h", valid) == NA_real_
!match("h", valid)
match("h", valid) == NA_real_
#' @title is hex
#' @description checks whether an input string is a valid hex color without an alpha transparency value
#' @param x a string input
#' @return TRUE or FALSE
is_hex <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || length(x) != 7) {
return(FALSE)
} else {
x = toupper(x)
valid = c(paste[0:9], LETTERS[1:6])
for (i in 2:7) {
if (!(substr(x, i, i) %in% valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
source("hex-color.R")
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
substr("#22", 1, 1)
is_hex("#FF00A7")
valid = c(paste[0:9], LETTERS[1:6])
apply(0:9, function = toString)
apply(0:9, toString)
apply(0:9, toString())
apply(0:9, FUN = toString())
apply(0:9, FUN = toString(x))
apply(x = 0:9, FUN = toString(x))
?apply
?toString
toString(c("x", "d"))
toString(c("x" "d"))
toString(c("x", "d"))
valid <-  toString(0:9)
valid = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", LETTERS[1:6])
#' @title is hex
#' @description checks whether an input string is a valid hex color without an alpha transparency value
#' @param x a string input
#' @return TRUE or FALSE
is_hex <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || length(x) != 7) {
return(FALSE)
} else {
x = toupper(x)
valid = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", LETTERS[1:6])
for (i in 2:7) {
if (!(substr(x, i, i) %in% valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
source("hex-color.R")
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex("#FF00A7")
"F" %in% valid)
"F" %in% valid
!("F" %in% valid)
length("#FF00A7")
nchar("#FF00A7")
#' @title is hex
#' @description checks whether an input string is a valid hex color without an alpha transparency value
#' @param x a string input
#' @return TRUE or FALSE
is_hex <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || nchar(x) != 7) {
return(FALSE)
} else {
x = toupper(x)
valid = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", LETTERS[1:6])
for (i in 2:7) {
if (!(substr(x, i, i) %in% valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
source("hex-color.R")
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex_alpha() <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || nchar(x) != 9) {
return(FALSE)
} else {
x = toupper(x)
valid = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", LETTERS[1:6])
for (i in 2:9) {
if (!(substr(x, i, i) %in% valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
#' @title is hex
#' @description checks whether an input string is a valid hex color without an alpha transparency value
#' @param x a string input
#' @return TRUE or FALSE
is_hex <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || nchar(x) != 7) {
return(FALSE)
} else {
x = toupper(x)
valid = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", LETTERS[1:6])
for (i in 2:7) {
if (!(substr(x, i, i) %in% valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
#' @title is hex alpha
#' @description checks whether an input string is a valid hex color with an alpha transparency value
#' @param x a string input
#' @return TRUE or FALSE
is_hex_alpha <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else if (substr(x, 1, 1) != "#" || nchar(x) != 9) {
return(FALSE)
} else {
x = toupper(x)
valid = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", LETTERS[1:6])
for (i in 2:9) {
if (!(substr(x, i, i) %in% valid)) {
return(FALSE)
}
}
return(TRUE)
}
}
source("hex-color.R")
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
test_that("is_hex_alpha() works as expected", {
expect_true(is_hex_alpha("#FF000078"))
expect_true(is_hex_alpha("#ffda0078"))
expect_false(is_hex_alpha("#FF0000"))
expect_false(is_hex_alpha("#ffda00"))
expect_error(is_hex_alpha(FF00A7))
expect_error(is_hex_alpha(TRUE))
})
substr("hi", -1, -1)
substr("hi", -2, -2)
7:1
substr("hi", 2, 2)
"i" + "f"
reverse_chars <- function(x) {
n <- nchars(x)
return_val <- ""
for (i in n:1) {
return_val = paste(return_val, substr(x, i, i))
}
}
source("reverse-chars.R")
context("Test for reverse_chars")
test_that("reverse_chars() works as expected", {
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
expect_equal(reverse_chars(pets), pets)
expect_equal(reverse_chars(ep), pe)
expect_equal(reverse_chars(car_cat), tac_rac)
expect_length(reverse_chars(car_cat), 1)
expect_type(reverse_chars(car_cat), "character")
expect_equal(nchar(reverse_chars(car_cat)), nchar(reverse_chars(tac_rac)))
})
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
reverse_chars(pets)
n <- nchar(x)
#' @title reverse characters
#' @description reverses a string by characters
#' @param x a string
#' @return reversed string
reverse_chars <- function(x) {
n <- nchar(x)
return_val <- ""
for (i in n:1) {
return_val = paste(return_val, substr(x, i, i))
}
}
source("reverse-chars.R")
context("Test for reverse_chars")
test_that("reverse_chars() works as expected", {
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
expect_equal(reverse_chars(pets), pets)
expect_equal(reverse_chars(ep), pe)
expect_equal(reverse_chars(car_cat), tac_rac)
expect_length(reverse_chars(car_cat), 1)
expect_type(reverse_chars(car_cat), "character")
expect_equal(nchar(reverse_chars(car_cat)), nchar(reverse_chars(tac_rac)))
})
reverse_chars(pets)
#' @title reverse characters
#' @description reverses a string by characters
#' @param x a string
#' @return reversed string
reverse_chars <- function(x) {
n <- nchar(x)
return_val <- ""
for (i in n:1) {
return_val = paste(return_val, substr(x, i, i))
}
return(return_val)
}
source("reverse-chars.R")
context("Test for reverse_chars")
test_that("reverse_chars() works as expected", {
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
expect_equal(reverse_chars(pets), pets)
expect_equal(reverse_chars(ep), pe)
expect_equal(reverse_chars(car_cat), tac_rac)
expect_length(reverse_chars(car_cat), 1)
expect_type(reverse_chars(car_cat), "character")
expect_equal(nchar(reverse_chars(car_cat)), nchar(reverse_chars(tac_rac)))
})
#' @title reverse characters
#' @description reverses a string by characters
#' @param x a string
#' @return reversed string
reverse_chars <- function(x) {
n <- nchar(x)
return_val <- ""
for (i in n:1) {
return_val = paste0(return_val, substr(x, i, i))
}
return(return_val)
}
source("reverse-chars.R")
context("Test for reverse_chars")
test_that("reverse_chars() works as expected", {
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
expect_equal(reverse_chars(pets), pets)
expect_equal(reverse_chars(ep), pe)
expect_equal(reverse_chars(car_cat), tac_rac)
expect_length(reverse_chars(car_cat), 1)
expect_type(reverse_chars(car_cat), "character")
expect_equal(nchar(reverse_chars(car_cat)), nchar(reverse_chars(tac_rac)))
})
reverse_chars(pets)
reverse_chars(ep)
reverse_chars(car_cat)
length(reverse_chars(car_cat))
return_vec <- c("a" = 0, "e" = 0, "i" = 0, "o" = 0, "u" = 0)
return_vec.names
names(return_vec)
is.vector(names(return_vec))
return_vec
return_vec["a"]
#' @title count vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return a named vector with the number of vowels
count_vowels <- function(x) {
if (!isString(x)) {
stop("invalid input; a string was expected")
} else{
x = tolower(x)
return_vec <- c("a" = 0, "e" = 0, "i" = 0, "o" = 0, "u" = 0)
for (i in 1:nchar(x)) {
letter = substr(x, i, i)
if (letter %in% names(return_vec)) {
return_vec[letter] = return_vec[letter] + 1
}
}
}
}
source("count-vowels.R")
context("Tests for count vowels")
test_that("count_vowels works as expected", {
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
vowels <- c('a', 'e', 'i', 'o', 'u')
counts <- c(1, 3, 1, 4, 2)
names(counts) <- vowels
expect_equal(count_vowels(fox), counts)
expect_equal(count_vowels(FOX), counts)
expect_length(count_vowels(fox), 5)
expect_named(count_vowels(fox), vowels)
expect_type(count_vowels(fox), 'double')
expect_length(count_vowels(do), 5)
})
#' @title count vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return a named vector with the number of vowels
count_vowels <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else{
x = tolower(x)
return_vec <- c("a" = 0, "e" = 0, "i" = 0, "o" = 0, "u" = 0)
for (i in 1:nchar(x)) {
letter = substr(x, i, i)
if (letter %in% names(return_vec)) {
return_vec[letter] = return_vec[letter] + 1
}
}
}
}
source("count-vowels.R")
context("Tests for count vowels")
test_that("count_vowels works as expected", {
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
vowels <- c('a', 'e', 'i', 'o', 'u')
counts <- c(1, 3, 1, 4, 2)
names(counts) <- vowels
expect_equal(count_vowels(fox), counts)
expect_equal(count_vowels(FOX), counts)
expect_length(count_vowels(fox), 5)
expect_named(count_vowels(fox), vowels)
expect_type(count_vowels(fox), 'double')
expect_length(count_vowels(do), 5)
})
#' @title count vowels
#' @description computes the number of vowels of a character string
#' @param x character string
#' @return a named vector with the number of vowels
count_vowels <- function(x) {
if (!is.string(x)) {
stop("invalid input; a string was expected")
} else{
x = tolower(x)
return_vec <- c("a" = 0, "e" = 0, "i" = 0, "o" = 0, "u" = 0)
for (i in 1:nchar(x)) {
letter = substr(x, i, i)
if (letter %in% names(return_vec)) {
return_vec[letter] = return_vec[letter] + 1
}
}
return(return_vec)
}
}
source("count-vowels.R")
context("Tests for count vowels")
test_that("count_vowels works as expected", {
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
vowels <- c('a', 'e', 'i', 'o', 'u')
counts <- c(1, 3, 1, 4, 2)
names(counts) <- vowels
expect_equal(count_vowels(fox), counts)
expect_equal(count_vowels(FOX), counts)
expect_length(count_vowels(fox), 5)
expect_named(count_vowels(fox), vowels)
expect_type(count_vowels(fox), 'double')
expect_length(count_vowels(do), 5)
})
expect_equal(count_vowels(FOX), counts)
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
functions <- dir('../code/functions')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
functions
dir('../code/functions')
?dir
setwd("~/Desktop/hw-stat133/workout02/output")
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
