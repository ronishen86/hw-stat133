plot(psf, house$Price, log = "xy", xlab = "Price per Square Feet", ylab = "Price of House", col = fp_colors)
# Houses with fireplaces are generally about the same price per square feet as houses without. There is no strong correlation between price and price per square feet. As the price per square feet increases, the price might not necessarily increase. So overall,the more expensive houses are comprised of both houses that are bigger, and houses that are more expensive per square feet.
getwd
getwd()
# data preprocessing: columns
dat <-  "../data/nba2018.csv"
?replace
# data preprocessing: columns
dat <-  "../data/nba2018.csv"
# data preprocessing: columns
dat <-  "../data/nba2018.csv"
# data preprocessing: columns
dat <-  read.csv("../data/nba2018.csv")
# data preprocessing: columns
dat <-  read_csv("../data/nba2018.csv")
?read_csv
setwd("~/Desktop/hw-stat133/workout1/code")
)
# data preprocessing: columns
dat <-  read_csv("../data/nba2018.csv")
??replace
dat$experience <- str_replace(dat$experience, "R", 0)
??convert
??int
strtoi(dat$experience)
dat$experience <- str_replace(dat$experience, "R", "0")
dat$experience <- str_replace(dat$experience, "R", "0")
??string
??replace
dat$experience <- replace(dat$experience, "R", "0")
dat$experience <- replace(dat$experience, "R", "0")
dat$experience <- replace(dat$experience, "R", 0)
replace(dat$experience, "R", "0")
dat$experience <- replace(dat$experience, dat[experience == "R"], "0")
dat$experience <- replace(dat$experience, dat[dat$experience == "R"], "0")
dat$experience <- replace(dat$experience, dat$experience[dat$experience == "R"], "0")
dat$experience[dat$experience == "R"] <- 0
data$experience <- as.integer(data$experience)
?as.integer
dat$experience <- as.integer(dat$experience)
??factor
labels = c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard")
dat$position <-  factor(dat$position, levels = c("C", "PF", "PG", "SF", "SG"),
labels = c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard"))
dat$position <-  factor(dat$position, levels = c("C", "PF", "PG", "SF", "SG"),
labels = c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard"))
# packages
library(dplyr)
View(dat)
View(dat)
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts)
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts - field_goals)
# factor position and more descriptive labels
dat$position <-  factor(dat$position, levels = c("C", "PF", "PG", "SF", "SG"), labels = c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard"))
# factor position and more descriptive labels
dat$position <-  factor(dat$position, c("C", "PF", "PG", "SF", "SG"), labels = c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard"))
View(dat)
View(dat)
# loading data
dat <-  read_csv("../data/nba2018.csv")
View(dat)
View(dat)
# experience to int
dat$experience[dat$experience == "R"] <- 0
dat$experience <- as.integer(dat$experience)
# salary units to million
dat$salary <- dat$salary/1000000
# factor position and more descriptive labels
dat$position <-  factor(dat$position, levels = c("C", "PF", "PG", "SF", "SG"), labels = c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard"))
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts - field_goals)
View(dat)
colnames(dat)
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts - field_goals, missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds, efficiency = (points + rebounds + assists + steals + blocks
- missed_fg - missed_ft - turnovers) / games_played)
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts - field_goals, missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds, efficiency = (points + rebounds + assists + steals + blocks
- missed_fg - missed_ft - turnovers) / games)
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts - field_goals, missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds, efficiency = (points + rebounds + assists + steals + blocks
- missed_fg - missed_ft - turnovers) / games))
# adding variables to dat
mutate(dat, missed_fg = field_goals_atts - field_goals, missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds, efficiency = (points + rebounds + assists + steals + blocks
- missed_fg - missed_ft - turnovers) / games)
# adding variables to dat
dat <- mutate(dat, missed_fg = field_goals_atts - field_goals, missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds, efficiency = (points + rebounds + assists + steals + blocks
- missed_fg - missed_ft - turnovers) / games)
sink("../output/efficiency-summary.txt")
summary(dat$efficiency)
sink()
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency)
View(teams)
View(teams)
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summary(
experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summary(
experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summary(
experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency)
dat %>%
filter(position == "PF", experience >= 5 & experience <= 10) %>%
select(age) %>%
summarise(
mean_age = mean(age),
sd_age = sd(age)
)
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team) %>%
summary(
experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
# creating teams data frame
teams <- data.frame(dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summary(
experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
))
View(dat)
View(teams)
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summarise(
experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
View(dat)
View(teams)
View(dat)
View(teams)
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summarise(
experience = sum(experience),
salary = round(sum(salary), 2),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
?write.csv
# exporting teams.csv file
write.csv(teams, file = "../data/teams.csv")
knitr::opts_chunk$set(echo = TRUE)
# packages
library(ggplot2)
# basic rankings
ggplot(teams, aes(x = salary, y = team)) +  geom_bar()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar() + coord_flip()
?geom_bar
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar() + coord_flip()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = identity) + coord_flip()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity"") + coord_flip()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity") + coord_flip()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity") + coord_flip()
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + title("NBA Teams Ranked by Total Salary")
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + title("NBA Teams Ranked by Total Salary")
?title
?ggplo
??ggplot
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + main("NBA Teams Ranked by Total Salary")
# basic rankings
ggplot(teams, aes(x = team, y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary")
# basic rankings
ggplot(teams, aes(x = reorder(team,salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary")
# basic rankings
ggplot(teams, aes(x = reorder(team,salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary") + geom_linerange(mean(salary))
# basic rankings
ggplot(teams, aes(x = reorder(team,salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary") + geom_linerange(mean(y))
?geom_linerange
??geom_vline
# basic rankings
ggplot(teams, aes(x = reorder(team,salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary") + geom_hline(yintercept = mean(teams$salary))
# teams ranked by points
ggplot(teams, aes(x = reorder(team, points), y = points)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Points") + ggtitle("NBA Teams Ranked by Total Points") + geom_hline(yintercept = mean(teams$points))
# teams ranked by efficiency
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
# teams ranked by efficiency
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
# teams ranked by efficiency
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
?geom_vline
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
data.frame(summarise(groupby(dat, teams), mean_age = mean(age)))
data.frame(summarise(group_by(dat, teams), mean_age = mean(age)))
data.frame(summarise(group_by(dat, team), mean_age = mean(age)))
# creating teams data frame
teams <- dat %>%
group_by(team) %>%
select(team, experience, salary, points3, points2, points1, points, off_rebounds, def_rebounds, assists,
steals, blocks, turnovers, fouls, efficiency) %>%
summarise(
experience = sum(experience),
salary = round(sum(salary), 2),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency),
)
?ggplot
?plot
?rep
rep(2,4)
c(1,2,3,4)[1]
c(1,2,3,4)[c(3,2,1)]
c(1,2,3,4)[rep(1,2)]
pnorm(2.1)
2(1-prnoem(2.1))
2(1-pnorm(2.1))
2*(1-pnorm(2.1))
??plot
knitr::opts_chunk$set(echo = TRUE)
curve(2*(1-pnorm((10.5+100*p) / (100*p*(1-p)))))
curve(2*(1-pnorm((10.5+100*x) / (100*x*(1-x)))))
curve(2*(1-pnorm((10.5+100*x) / (100*x*(1-x)))), xlab = "p")
curve(2*(1-pnorm((10.5+100*x) / (100*x*(1-x)))), xlab = "p", ylab = "power")
curve(2*(1-pnorm((10.5+100*x) / (100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-qnorm((10.5+100*x) / (100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-pnorm((10.5+100*x) / (100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(pnorm((100*x - 10.5) / (100*x*(1-x))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(pnorm((100*x - 10.5) / (100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm((100*x - 10.5) / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm((100*x - 10.5) / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm((10.5 + 100*x) / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm((10.5 + 100*x) / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm((10.5) / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(-(pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*((pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(((pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(((pnorm(10.5 + 100x/ sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(((pnorm((10.5 + 100*x) / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(((pnorm(100*x / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(((pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(((pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve(2*(1-(pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve")
curve((pnorm(10.5 / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
curve((pnorm(10.5 / sqrt(10*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
curve((pnorm(10.5 / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve")
?sqrt
sqrt(100*x*(1-x))
x = .5
sqrt(100*x*(1-x))
?curve
curve((pnorm(10.5 / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", from 0 to 1)
curve((pnorm(10.5 / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", from 0, to 1)
curve((pnorm(10.5 / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", from = 0, to = 1)
curve((pnorm(10.5 / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*(1(pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*(1 - (pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*((pnorm(-10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*((pnorm(100*x -10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*(1-(pnorm(10.5 / sqrt(100*x*(1-x))))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*
(1-
pnorm(
10.5 /
sqrt(100*x*(1-x)))
), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*(1-pnorm(100*x / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*(1-pnorm(60.5 - 100*x / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(2*(1-pnorm(100*x / sqrt(100*x*(1-x)))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
curve(pnorm((39.5-100*x) / sqrt(100*x*(1-x))) + 1 - pnorm((60.5-100*x) / sqrt(100*x*(1-x))))
curve(pnorm((39.5-100*x) / sqrt(100*x*(1-x))) + 1 - pnorm((60.5-100*x) / sqrt(100*x*(1-x))), xlab = "p", ylab = "power", main = "power curve", ylim = c(0,1))
2/.05
sqrt(.95)
1.ans
1-ans
1-sqrt(.95)
?bnorm
??binomial
??dbinom
?dbinom
pbinom(10, size = 100, .5)
pbinom(40, 100, .5) + 1 - pbinom(60, 100, ,5)
pbinom(40, size = 100, prob = .5) + 1 - pbinom(60, 100, ,5)
pbinom(40, size = 100, prob = .5) + 1 - pbinom(60, size = 100, .5)
pbinom(40, size = 100, prob = .5) + 1 - pbinom(60, size = 100, prob = .5)
data <-  C(103.768, 92.295, 100.615, 102.754, 61.675, 88.017, 108.579, 73.003, 71.210, 73.154, 123.086, 84.023, 106.755, 91.052, 76.014, 89.222, 88.602, 90.677, 82.115, 90.479)
data <-  c(103.768, 92.295, 100.615, 102.754, 61.675, 88.017, 108.579, 73.003, 71.210, 73.154, 123.086, 84.023, 106.755, 91.052, 76.014, 89.222, 88.602, 90.677, 82.115, 90.479)
mean_6G <- mean(data)
sd_6G <- sd(data)
data <-  c(103.768, 92.295, 100.615, 102.754, 61.675, 88.017, 108.579, 73.003, 71.210, 73.154, 123.086, 84.023, 106.755, 91.052, 76.014, 89.222, 88.602, 90.677, 82.115, 90.479)
89.85-100
(89.85-100) / (14.9/sqrt(20))
a <- c(1,2,3,4,5,6)
a[TRUE]
a[TRUE,]
View(dat)
# teams ranked by index of choice
team_work <- data.frame(dat$def_rebounds + dat$assists)
# teams ranked by index of choice
teams$team_work <- dat$def_rebounds + dat$assists
View(teams)
# teams ranked by index of choice
teams$team_work <- teams$def_rebounds + teams$assists
teams$team_work <- teams$def_rebounds + teams$assists
ggplot(teams, aes(x = reorder(team, team_work ), y = team_work )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Team Work ") + ggtitle("NBA Teams Ranked by Total team_work ") + geom_hline(yintercept = mean(teams$team_work ))
# packages
library(ggplot2)
# basic rankings : teams by salary
ggplot(teams, aes(x = reorder(team, salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary") + geom_hline(yintercept = mean(teams$salary))
# teams ranked by points
ggplot(teams, aes(x = reorder(team, points), y = points)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Points") + ggtitle("NBA Teams Ranked by Total Points") + geom_hline(yintercept = mean(teams$points))
# teams ranked by efficiency
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
# teams ranked by index of choice
teams$team_work <- teams$def_rebounds + teams$assists
ggplot(teams, aes(x = reorder(team, team_work ), y = team_work )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Team Work ") + ggtitle("NBA Teams Ranked by Total Team Work ") + geom_hline(yintercept = mean(teams$team_work ))
knitr::opts_chunk$set(echo = TRUE)
# packages
library(ggplot2)
# basic rankings : teams by salary
ggplot(teams, aes(x = reorder(team, salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary") + geom_hline(yintercept = mean(teams$salary))
# teams ranked by points
ggplot(teams, aes(x = reorder(team, points), y = points)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Points") + ggtitle("NBA Teams Ranked by Total Points") + geom_hline(yintercept = mean(teams$points))
# teams ranked by efficiency
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
# teams ranked by index of choice
teams$team_work <- teams$def_rebounds + teams$assists
ggplot(teams, aes(x = reorder(team, team_work ), y = team_work )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Team Work ") + ggtitle("NBA Teams Ranked by Total Team Work ") + geom_hline(yintercept = mean(teams$team_work ))
# Was this your first time working on a project with such file structure? If yes, how do you feel about it? No, I think this project was pretty similar to some of the previous workouts/labs.
# Was this your first time using relative paths? If yes, can you tell why they are important for reproducibility purposes? No I've used relative paths before. Using relative paths helps you keep a tree diagram of how all the files and directories are connected as well as use the easiest path instead of having to find a certain file or directory from the top.
# Was this your first time using an R script? If yes, what do you think about just writing code (without markdown syntax)? No, I've used R script in the previous lab. It's less work since I don't have to write "```{r}" to indicate the code I'm writing is R code, but also I like using R markdown so I can section off my code more clearly.
# What things were hard, even though you saw them in class/lab? Just remembering all the functions for everything.
# What was easy(-ish) even though we haven’t done it in class/lab? Finding out how to make a horizontal histogram.
# Did anyone help you completing the assignment? If so, who? No.
# How much time did it take to complete this HW? around 2.5 hours.
# What was the most time consuming part? Figuring out what "index" means in "Create a fourth bar chart but this time using your own index."
# Was there anything interesting? Making a horizontal bar graph and adding in the average line was interesting.
# importing data
teams <- read.csv(file = "../output/teams_summary.csv")
# importing data
teams <- read.csv(file = "../code/nba2018-teams.csv")
# importing data
teams <- read.csv(file = "../code/nba2018-teams.csv")
setwd("~/Desktop/hw-stat133/workout1/report")
# importing data
teams <- read.csv(file = "../code/nba2018-teams.csv")
# importing data
teams <- read.csv(file = "../data/nba2018-teams.csv")
knitr::opts_chunk$set(echo = TRUE)
# packages
library(ggplot2)
# importing data
teams <- read.csv(file = "../data/nba2018-teams.csv")
# basic rankings : teams by salary
ggplot(teams, aes(x = reorder(team, salary), y = salary)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary") + geom_hline(yintercept = mean(teams$salary))
# teams ranked by points
ggplot(teams, aes(x = reorder(team, points), y = points)) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Points") + ggtitle("NBA Teams Ranked by Total Points") + geom_hline(yintercept = mean(teams$points))
# teams ranked by efficiency
ggplot(teams, aes(x = reorder(team, efficiency ), y = efficiency )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Efficiency ") + ggtitle("NBA Teams Ranked by Total efficiency ") + geom_hline(yintercept = mean(teams$efficiency ))
# teams ranked by index of choice
teams$team_work <- teams$def_rebounds + teams$assists
ggplot(teams, aes(x = reorder(team, team_work ), y = team_work )) +  geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Team Work ") + ggtitle("NBA Teams Ranked by Total Team Work ") + geom_hline(yintercept = mean(teams$team_work ))
# Was this your first time working on a project with such file structure? If yes, how do you feel about it? No, I think this project was pretty similar to some of the previous workouts/labs.
# Was this your first time using relative paths? If yes, can you tell why they are important for reproducibility purposes? No I've used relative paths before. Using relative paths helps you keep a tree diagram of how all the files and directories are connected as well as use the easiest path instead of having to find a certain file or directory from the top.
# Was this your first time using an R script? If yes, what do you think about just writing code (without markdown syntax)? No, I've used R script in the previous lab. It's less work since I don't have to write "```{r}" to indicate the code I'm writing is R code, but also I like using R markdown so I can section off my code more clearly.
# What things were hard, even though you saw them in class/lab? Just remembering all the functions for everything.
# What was easy(-ish) even though we haven’t done it in class/lab? Finding out how to make a horizontal histogram.
# Did anyone help you completing the assignment? If so, who? No.
# How much time did it take to complete this HW? around 2.5 hours.
# What was the most time consuming part? Figuring out what "index" means in "Create a fourth bar chart but this time using your own index."
# Was there anything interesting? Making a horizontal bar graph and adding in the average line was interesting.
sink("../output/teams-summary.txt")
summary(teams)
sink()
